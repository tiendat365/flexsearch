const express = require('express');
const cors = require('cors');
const fs = require('fs').promises;
const mongoose = require('mongoose');
require('dotenv').config(); 
const FlexSearch = require('flexsearch');
const os = require('os');

// Redis client (optional - s·∫Ω fail gracefully n·∫øu kh√¥ng c√≥ Redis)
let redisClient = null;
if (process.env.REDIS_URL) {
    try {
        const redis = require('redis');
        redisClient = redis.createClient({ url: process.env.REDIS_URL });
        redisClient.on('error', (err) => {
            console.log('‚ö†Ô∏è Redis kh√¥ng kh·∫£ d·ª•ng, ch·∫°y kh√¥ng c√≥ cache');
            redisClient = null;
        });
        redisClient.connect().catch(() => {
            console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi Redis, ch·∫°y kh√¥ng c√≥ cache');
            redisClient = null;
        });
        console.log('üîó Redis client kh·ªüi t·∫°o');
    } catch (error) {
        console.log('‚ö†Ô∏è Redis kh√¥ng c√≥, ch·∫°y kh√¥ng c√≥ cache');
        redisClient = null;
    }
} else {
    console.log('‚ÑπÔ∏è Ch·∫°y m√† kh√¥ng c√≥ Redis cache');
}
// === KH·ªûI T·∫†O ·ª®NG D·ª§NG EXPRESS ===
const app = express();
// S·ª≠ d·ª•ng PORT t·ª´ file .env ho·∫∑c m·∫∑c ƒë·ªãnh l√† 5000
const PORT = process.env.PORT || 5000;

// Th√¥ng tin node instance
const NODE_ID = process.env.NODE_ID || process.env.INSTANCE_ID || os.hostname();
const NODE_NAME = process.env.NODE_NAME || `FlexSearch-${NODE_ID}`;
console.log(`üöÄ Node instance: ${NODE_NAME} (PID: ${process.pid})`);

// === C·∫§U H√åNH ƒê·ªíNG B·ªò CLUSTER ===
const CLUSTER_NODES = [
    { id: 'node-1', name: 'M√°y-1 (Ch√≠nh)', port: 5501 },
    { id: 'node-2', name: 'M√°y-2', port: 5502 },
    { id: 'node-3', name: 'M√°y-3', port: 5503 }
];

// L·∫•y danh s√°ch c√°c node kh√°c (kh√¥ng bao g·ªìm node hi·ªán t·∫°i)
const OTHER_NODES = CLUSTER_NODES.filter(node => node.id !== NODE_ID);

console.log(`üîó Node hi·ªán t·∫°i: ${NODE_ID} tr√™n port ${PORT}`);
console.log(`üåê S·∫Ω ƒë·ªìng b·ªô v·ªõi ${OTHER_NODES.length} node kh√°c:`, OTHER_NODES.map(n => `${n.id}:${n.port}`).join(', '));

// === C·∫§U H√åNH MIDDLEWARE ===
app.use(cors());
app.use(express.json());
// Ph·ª•c v·ª• c√°c t·ªáp tƒ©nh (HTML, CSS, JS ph√≠a client) t·ª´ th∆∞ m·ª•c 'public'
app.use(express.static('public'));

// === FUNCTIONS ƒê·ªíNG B·ªò D·ªÆ LI·ªÜU GI·ªÆA C√ÅC NODE ===
const axios = require('axios');

// G·ª≠i th√¥ng b√°o ƒë·ªìng b·ªô ƒë·∫øn c√°c node kh√°c
async function syncToOtherNodes(action, data) {
    const promises = OTHER_NODES.map(async (node) => {
        try {
            const response = await axios.post(`http://localhost:${node.port}/api/sync`, {
                action,        // 'create', 'update', 'delete'
                data,          // d·ªØ li·ªáu c·∫ßn ƒë·ªìng b·ªô
                sourceNode: NODE_ID,
                timestamp: Date.now()
            }, {
                timeout: 3000,  // Timeout 3 gi√¢y
                headers: {
                    'Content-Type': 'application/json',
                    'X-Sync-Source': NODE_ID
                }
            });
            console.log(`‚úÖ ƒê·ªìng b·ªô ${action} th√†nh c√¥ng t·ªõi ${node.id}:${node.port}`);
            return { node: node.id, success: true };
        } catch (error) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªìng b·ªô t·ªõi ${node.id}:${node.port} - ${error.message}`);
            return { node: node.id, success: false, error: error.message };
        }
    });

    const results = await Promise.allSettled(promises);
    const successCount = results.filter(r => r.status === 'fulfilled' && r.value.success).length;
    console.log(`üîÑ ƒê·ªìng b·ªô ho√†n t·∫•t: ${successCount}/${OTHER_NODES.length} node th√†nh c√¥ng`);
    return results;
}

// X·ª≠ l√Ω th√¥ng b√°o ƒë·ªìng b·ªô t·ª´ node kh√°c
async function handleSyncMessage(action, data, sourceNode) {
    try {
        console.log(`üì® Nh·∫≠n th√¥ng b√°o ƒë·ªìng b·ªô ${action} t·ª´ ${sourceNode}`);
        
        switch (action) {
            case 'create':
                // Th√™m document v√†o DB v√† index (kh√¥ng g·ª≠i l·∫°i sync)
                const newDoc = new Document(data);
                await newDoc.save();
                index.add(newDoc.toJSON());
                console.log(`‚ûï ƒê√£ ƒë·ªìng b·ªô th√™m document: ${data.title}`);
                break;
                
            case 'update':
                // C·∫≠p nh·∫≠t document trong DB v√† index
                const updatedDoc = await Document.findByIdAndUpdate(data._id, data, { new: true });
                if (updatedDoc) {
                    index.update(updatedDoc.toJSON());
                    console.log(`üîÑ ƒê√£ ƒë·ªìng b·ªô c·∫≠p nh·∫≠t document: ${data.title}`);
                }
                break;
                
            case 'delete':
                // X√≥a document t·ª´ DB v√† index
                await Document.findByIdAndDelete(data._id);
                index.remove(data._id);
                console.log(`üóëÔ∏è ƒê√£ ƒë·ªìng b·ªô x√≥a document ID: ${data._id}`);
                break;
                
            case 'search_history':
                // ƒê·ªìng b·ªô l·ªãch s·ª≠ t√¨m ki·∫øm
                const searchRecord = new SearchHistory(data);
                await searchRecord.save();
                console.log(`üîç ƒê√£ ƒë·ªìng b·ªô l·ªãch s·ª≠ t√¨m ki·∫øm: "${data.query}" t·ª´ ${sourceNode}`);
                break;
                
            default:
                console.warn(`‚ö†Ô∏è Action kh√¥ng h·ªó tr·ª£: ${action}`);
        }
        
        return true;
    } catch (error) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω ƒë·ªìng b·ªô ${action}:`, error);
        return false;
    }
}

// === K·∫æT N·ªêI V·ªöI MONGODB ===
// S·ª≠ d·ª•ng chu·ªói k·∫øt n·ªëi t·ª´ file .env
// === ƒê·ªäNH NGHƒ®A C·∫§U TR√öC D·ªÆ LI·ªÜU (SCHEMA & MODEL) ===
const documentSchema = new mongoose.Schema({
    title: { type: String, required: true },
    content: { type: String, required: true }
}, { timestamps: true }); // Th√™m timestamps ƒë·ªÉ bi·∫øt khi n√†o t√†i li·ªáu ƒë∆∞·ª£c t·∫°o/c·∫≠p nh·∫≠t
const Document = mongoose.model('Document', documentSchema);

// Schema cho l·ªãch s·ª≠ t√¨m ki·∫øm
const searchHistorySchema = new mongoose.Schema({
    query: { type: String, required: true, trim: true },
    nodeId: { type: String, required: true }, // Node n√†o th·ª±c hi·ªán t√¨m ki·∫øm
    nodeName: { type: String },
    resultCount: { type: Number, default: 0 }, // S·ªë k·∫øt qu·∫£ t√¨m ƒë∆∞·ª£c
    userAgent: { type: String }, // Th√¥ng tin browser/client
    ipAddress: { type: String } // IP address (n·∫øu c√≥)
}, { timestamps: true });

// Index ƒë·ªÉ t·ªëi ∆∞u h√≥a truy v·∫•n
searchHistorySchema.index({ query: 1 });
searchHistorySchema.index({ nodeId: 1 });
searchHistorySchema.index({ createdAt: -1 });

const SearchHistory = mongoose.model('SearchHistory', searchHistorySchema);

// Danh s√°ch c√°c t·ª´ d·ª´ng ph·ªï bi·∫øn trong ti·∫øng Vi·ªát
const vietnameseStopwords = [
    "v√†", "l√†", "c·ªßa", "trong", "cho", "c√≥", "ƒë∆∞·ª£c", "m·ªôt", "khi", "t·ª´",
    "ƒë·∫øn", "v·ªõi", "ƒë·ªÉ", "c√°c", "nh∆∞", "n√†y", "ƒë√£", "v·ªÅ", "th√¨", "·ªü"
];

// Khai b√°o index ·ªü ƒë√¢y nh∆∞ng s·∫Ω kh·ªüi t·∫°o trong h√†m populateIndex
let index;

// === H√ÄM HIGHLIGHT T·ª™ KH√ìA ===
function highlightText(text, query) {
    if (!text || !query) return text;
    
    // T·∫°o regex ƒë·ªÉ t√¨m t·ª´ kh√≥a (case-insensitive)
    const words = query.trim().split(/\s+/);
    const pattern = words.map(word => word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).join('|');
    const regex = new RegExp(`(${pattern})`, 'gi');
    
    // Wrap t·ª´ kh√≥a v·ªõi th·∫ª <mark>
    return text.replace(regex, '<mark>$1</mark>');
}

// === H√ÄM ƒê·ªíNG B·ªò D·ªÆ LI·ªÜU T·ª™ DB V√ÄO INDEX ===
async function populateIndex() {
    try {
        console.log("üîÑ ƒêang ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª´ MongoDB v√†o Index...");
        // Kh·ªüi t·∫°o m·ªôt index m·ªõi, tr·ªëng m·ªói khi h√†m n√†y ƒë∆∞·ª£c g·ªçi
        index = new FlexSearch.Document({
            document: {
                id: "_id",
                index: ["title", "content"],
                store: ["title", "content"]
            },
            tokenize: "forward",
            resolution: 9
        });

        const allDocs = await Document.find({});
        allDocs.forEach(doc => {
            // S·ª≠ d·ª•ng toJSON() thay v√¨ toObject() ƒë·ªÉ ƒë·∫£m b·∫£o _id ƒë∆∞·ª£c chuy·ªÉn th√†nh chu·ªói.
            // ƒêi·ªÅu n√†y gi√∫p FlexSearch x·ª≠ l√Ω ID m·ªôt c√°ch nh·∫•t qu√°n v√† tr√°nh c√°c l·ªói ti·ªÅm ·∫©n
            // li√™n quan ƒë·∫øn ki·ªÉu d·ªØ li·ªáu ObjectId c·ªßa Mongoose.
            // toJSON() c≈©ng t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi c√°c ki·ªÉu d·ªØ li·ªáu kh√°c nh∆∞ Date th√†nh chu·ªói ISO.
            index.add(doc.toJSON());
        });
        console.log(`‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng ${allDocs.length} t√†i li·ªáu.`);
    } catch (error) {
        console.error("‚ùå L·ªói khi ƒë·ªìng b·ªô index:", error);
    }
}

// ===================================
// === DISTRIBUTED SYSTEM MIDDLEWARE ===
// ===================================

// Cache middleware cho search
async function cacheMiddleware(req, res, next) {
    if (!redisClient) return next();
    
    try {
        const query = req.query.q || req.query.title || req.query.content;
        if (!query) return next();
        
        const cacheKey = `search:${Buffer.from(query.toLowerCase()).toString('base64')}`;
        const cached = await redisClient.get(cacheKey);
        
        if (cached) {
            const result = JSON.parse(cached);
            result.fromCache = true;
            result.nodeId = NODE_ID;
            result.nodeName = NODE_NAME;
            console.log(`üéØ Cache HIT for query: "${query}" on ${NODE_NAME}`);
            return res.json(result);
        }
        
        // Store cache key for later use
        req.cacheKey = cacheKey;
        next();
    } catch (error) {
        console.error('Cache middleware error:', error);
        next(); // Fail gracefully
    }
}

// ===================================
// === ƒê·ªäNH NGHƒ®A C√ÅC ƒê∆Ø·ªúNG D·∫™N API ===
// ===================================

// H√†m ƒë·ªÉ highlight t·ª´ kh√≥a t√¨m ki·∫øm trong text
function highlightText(text, query) {
    if (!text || !query) return text;
    
    // T·∫°o regex ƒë·ªÉ t√¨m t·ª´ kh√≥a (case-insensitive)
    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    
    // Thay th·∫ø t·ª´ kh√≥a b·∫±ng version ƒë∆∞·ª£c b·ªçc trong th·∫ª <b>
    return text.replace(regex, '<b>$1</b>');
}

// API T√¨m ki·∫øm (d√πng Index + Cache)
app.get('/api/search', cacheMiddleware, async (req, res) => {
  try {
    const queryParams = req.query;
    const query = queryParams.q || queryParams.title || queryParams.content;
    
    if (!query) {
      return res.status(400).json({ error: "Vui l√≤ng cung c·∫•p tham s·ªë 'q' ƒë·ªÉ t√¨m ki·∫øm." });
    }

    const limit = parseInt(queryParams.limit) || 10;
    
    console.log("Searching for:", query);
    
    // T√¨m ki·∫øm ƒë∆°n gi·∫£n h∆°n - ch·ªâ t√¨m trong title
    const searchResults = index.search(query, {
      field: "title",
      limit: limit,
      enrich: true
    });
    
    console.log("Search results count:", searchResults.length);
    
    // FlexSearch v·ªõi enrich:true tr·∫£ v·ªÅ [{field, result: [{id, doc}]}]
    let results = [];
    if (searchResults.length > 0 && searchResults[0].result) {
      results = searchResults[0].result.map(item => ({
        doc: item.doc,
        highlight: highlightText(item.doc.title, query)
      }));
    }
    
    console.log("Returning", results.length, "results");
    
    // Prepare response v·ªõi node info
    const response = {
      results,
      fromCache: false,
      nodeId: NODE_ID,
      nodeName: NODE_NAME,
      timestamp: new Date().toISOString(),
      query: query,
      totalResults: results.length
    };
    
    // Store in cache n·∫øu c√≥ Redis
    if (redisClient && req.cacheKey && results.length > 0) {
      try {
        await redisClient.setEx(req.cacheKey, 300, JSON.stringify(response)); // TTL 5 ph√∫t
        console.log(`üíæ Cached search results for: "${query}" on ${NODE_NAME}`);
      } catch (cacheError) {
        console.error('Cache store error:', cacheError);
      }
    }
    
    // üîç L∆∞U L·ªäCH S·ª¨ T√åM KI·∫æM V√Ä ƒê·ªíNG B·ªò
    const searchHistoryData = {
      query: query.toLowerCase().trim(),
      nodeId: NODE_ID,
      nodeName: NODE_NAME,
      resultCount: results.length,
      userAgent: req.headers['user-agent'] || 'Unknown',
      ipAddress: req.ip || req.connection.remoteAddress || 'Unknown'
    };

    // L∆∞u l·ªãch s·ª≠ t√¨m ki·∫øm (kh√¥ng ch·ªù k·∫øt qu·∫£)
    const saveSearchHistory = async () => {
      try {
        const searchRecord = new SearchHistory(searchHistoryData);
        await searchRecord.save();
        console.log(`üìù ƒê√£ l∆∞u l·ªãch s·ª≠ t√¨m ki·∫øm: "${query}"`);
        
        // ƒê·ªìng b·ªô l·ªãch s·ª≠ t√¨m ki·∫øm t·ªõi c√°c node kh√°c
        if (!req.headers['x-sync-source']) {
          syncToOtherNodes('search_history', searchHistoryData).catch(console.error);
        }
      } catch (error) {
        console.error('L·ªói l∆∞u l·ªãch s·ª≠ t√¨m ki·∫øm:', error);
      }
    };
    
    saveSearchHistory(); // Ch·∫°y async kh√¥ng ch·ªù

    res.json(response);
    } catch (error) {
        console.error("L·ªói API Search:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi t√¨m ki·∫øm" });
    }
  });

// API L·∫•y t·∫•t c·∫£ t√†i li·ªáu (C√ì PH√ÇN TRANG)
app.get('/api/documents', async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const docs = await Document.find({}).sort({ createdAt: -1 }).skip(skip).limit(limit);
        const totalDocuments = await Document.countDocuments();
        
        res.json({
            documents: docs,
            currentPage: page,
            totalPages: Math.ceil(totalDocuments / limit)
        });
    } catch (error) {
        console.error("L·ªói API Get Documents:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi l·∫•y t√†i li·ªáu" });
    }
});

// API Th√™m t√†i li·ªáu
app.post('/api/documents', async (req, res) => {
    try {
        const { title, content } = req.body;
        if (!title || !content) {
            return res.status(400).json({ error: "Ti√™u ƒë·ªÅ v√† n·ªôi dung l√† b·∫Øt bu·ªôc" });
        }
        const newDoc = new Document({ title, content });
        await newDoc.save();
        
        // Ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
        res.status(201).json(newDoc);
        
        // C·∫≠p nh·∫≠t index trong n·ªÅn
        index.add(newDoc.toJSON());
        console.log(`üìù ƒê√£ th√™m t√†i li·ªáu "${title}" v√†o DB v√† Index.`);

        // üîÑ ƒê·ªíNG B·ªò t·ªõi c√°c node kh√°c (kh√¥ng ch·ªù k·∫øt qu·∫£)
        if (!req.headers['x-sync-source']) { // Ch·ªâ sync n·∫øu kh√¥ng ph·∫£i t·ª´ node kh√°c
            syncToOtherNodes('create', newDoc.toJSON()).catch(console.error);
        }

    } catch (error) {
        console.error("L·ªói API Add Document:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi th√™m t√†i li·ªáu" });
    }
});

// API C·∫≠p nh·∫≠t t√†i li·ªáu
app.put('/api/documents/:id', async (req, res) => {
    try {
        const updatedDoc = await Document.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedDoc) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu" });
        }
        
        res.json(updatedDoc);

        // C·∫≠p nh·∫≠t index trong n·ªÅn. Ch·ªâ s·ª≠ d·ª•ng toJSON() ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n.
        index.update(updatedDoc.toJSON());
        console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t t√†i li·ªáu "${updatedDoc.title}" trong DB v√† Index.`);

        // üîÑ ƒê·ªíNG B·ªò t·ªõi c√°c node kh√°c (kh√¥ng ch·ªù k·∫øt qu·∫£)
        if (!req.headers['x-sync-source']) { // Ch·ªâ sync n·∫øu kh√¥ng ph·∫£i t·ª´ node kh√°c
            syncToOtherNodes('update', updatedDoc.toJSON()).catch(console.error);
        }

    } catch (error) {
        console.error("L·ªói API Update Document:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t t√†i li·ªáu" });
    }
});

// API X√≥a t√†i li·ªáu
app.delete('/api/documents/:id', async (req, res) => {
    try {
        const deletedDoc = await Document.findByIdAndDelete(req.params.id);
        if (!deletedDoc) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu" });
        }
        
        res.json({ message: "X√≥a th√†nh c√¥ng" });
        
        index.remove(req.params.id);
        console.log(`üóëÔ∏è ƒê√£ x√≥a t√†i li·ªáu ID "${req.params.id}" kh·ªèi DB v√† Index.`);

        // üîÑ ƒê·ªíNG B·ªò t·ªõi c√°c node kh√°c (kh√¥ng ch·ªù k·∫øt qu·∫£)
        if (!req.headers['x-sync-source']) { // Ch·ªâ sync n·∫øu kh√¥ng ph·∫£i t·ª´ node kh√°c
            syncToOtherNodes('delete', { _id: req.params.id, title: deletedDoc.title }).catch(console.error);
        }

    } catch (error) {
        console.error("L·ªói API Delete Document:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi x√≥a t√†i li·ªáu" });
    }
});

// üîÑ API ƒê·ªíNG B·ªò D·ªÆ LI·ªÜU GI·ªÆA C√ÅC NODE
app.post('/api/sync', async (req, res) => {
    try {
        const { action, data, sourceNode, timestamp } = req.body;
        
        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa request
        if (!action || !data || !sourceNode) {
            return res.status(400).json({ 
                error: "Thi·∫øu th√¥ng tin ƒë·ªìng b·ªô", 
                required: ["action", "data", "sourceNode"] 
            });
        }

        // Tr√°nh ƒë·ªìng b·ªô t·ª´ ch√≠nh m√¨nh
        if (sourceNode === NODE_ID) {
            return res.status(200).json({ message: "B·ªè qua ƒë·ªìng b·ªô t·ª´ ch√≠nh m√¨nh" });
        }

        // X·ª≠ l√Ω th√¥ng b√°o ƒë·ªìng b·ªô
        const success = await handleSyncMessage(action, data, sourceNode);
        
        if (success) {
            res.status(200).json({ 
                message: `ƒê·ªìng b·ªô ${action} th√†nh c√¥ng`, 
                node: NODE_ID,
                timestamp: Date.now()
            });
        } else {
            res.status(500).json({ 
                error: `L·ªói x·ª≠ l√Ω ƒë·ªìng b·ªô ${action}`,
                node: NODE_ID 
            });
        }

    } catch (error) {
        console.error("L·ªói API Sync:", error);
        res.status(500).json({ 
            error: "L·ªói m√°y ch·ªß khi x·ª≠ l√Ω ƒë·ªìng b·ªô",
            details: error.message 
        });
    }
});

// üìä API TH·ªêNG K√ä L·ªäCH S·ª¨ T√åM KI·∫æM
app.get('/api/search/stats', async (req, res) => {
    try {
        const { node, limit = 10, days = 7 } = req.query;
        const daysAgo = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
        
        // Query filter
        const filter = { createdAt: { $gte: daysAgo } };
        if (node && node !== 'all') {
            filter.nodeId = node;
        }

        // Th·ªëng k√™ t·ªïng quan
        const totalSearches = await SearchHistory.countDocuments(filter);
        const todaySearches = await SearchHistory.countDocuments({
            ...filter,
            createdAt: { $gte: new Date().setHours(0, 0, 0, 0) }
        });
        
        // Top t·ª´ kh√≥a t√¨m ki·∫øm nhi·ªÅu nh·∫•t
        const topQueries = await SearchHistory.aggregate([
            { $match: filter },
            { $group: { _id: '$query', count: { $sum: 1 }, lastSearched: { $max: '$createdAt' } } },
            { $sort: { count: -1 } },
            { $limit: parseInt(limit) }
        ]);

        // Th·ªëng k√™ theo node
        const nodeStats = await SearchHistory.aggregate([
            { $match: filter },
            { $group: { 
                _id: { nodeId: '$nodeId', nodeName: '$nodeName' }, 
                count: { $sum: 1 },
                avgResults: { $avg: '$resultCount' }
            }},
            { $sort: { count: -1 } }
        ]);

        // Th·ªëng k√™ theo ng√†y (7 ng√†y g·∫ßn nh·∫•t)
        const dailyStats = await SearchHistory.aggregate([
            { $match: filter },
            {
                $group: {
                    _id: { $dateToString: { format: '%Y-%m-%d', date: '$createdAt' } },
                    count: { $sum: 1 },
                    uniqueQueries: { $addToSet: '$query' }
                }
            },
            {
                $project: {
                    date: '$_id',
                    count: 1,
                    uniqueQueries: { $size: '$uniqueQueries' }
                }
            },
            { $sort: { date: -1 } },
            { $limit: parseInt(days) }
        ]);

        res.json({
            period: `${days} ng√†y g·∫ßn nh·∫•t`,
            summary: {
                totalSearches,
                todaySearches,
                averagePerDay: Math.round(totalSearches / days),
                nodes: nodeStats.length
            },
            topQueries: topQueries.map(q => ({
                query: q._id,
                count: q.count,
                lastSearched: q.lastSearched
            })),
            nodeStats: nodeStats.map(n => ({
                nodeId: n._id.nodeId,
                nodeName: n._id.nodeName,
                searchCount: n.count,
                avgResults: Math.round(n.avgResults * 10) / 10
            })),
            dailyStats: dailyStats.reverse(),
            currentNode: NODE_ID,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('L·ªói API Search Stats:', error);
        res.status(500).json({ error: 'L·ªói m√°y ch·ªß khi l·∫•y th·ªëng k√™ t√¨m ki·∫øm' });
    }
});

// API Ki·ªÉm tra "s·ª©c kh·ªèe" c·ªßa ·ª©ng d·ª•ng v√† DB
app.get('/api/health', async (req, res) => {
    try {
        const dbState = mongoose.connection.readyState;
        const isConnected = dbState === 1;
        
        // Ki·ªÉm tra Redis connection
        let redisStatus = 'disconnected';
        if (redisClient) {
            try {
                await redisClient.ping();
                redisStatus = 'connected';
            } catch (err) {
                redisStatus = 'error';
            }
        }

        const health = {
            status: isConnected ? 'UP' : 'DOWN',
            timestamp: new Date().toISOString(),
            node: {
                id: NODE_ID,
                name: NODE_NAME,
                pid: process.pid,
                uptime: process.uptime(),
                version: process.version
            },
            services: {
                database: isConnected ? 'connected' : `state: ${mongoose.STATES[dbState]}`,
                redis: redisStatus,
                search: index ? 'ready' : 'not-ready'
            },
            memory: process.memoryUsage(),
            loadAverage: os.loadavg(),
            platform: os.platform()
        };

        if (isConnected) {
            res.status(200).json(health);
        } else {
            res.status(503).json(health); // 503 Service Unavailable
        }
    } catch (error) {
        res.status(500).json({
            status: 'ERROR',
            error: error.message,
            node: { id: NODE_ID, name: NODE_NAME }
        });
    }
});

// =====================================
// === DISTRIBUTED SYSTEM ENDPOINTS ===
// =====================================

// Dashboard metrics endpoint
app.get('/api/dashboard/metrics', (req, res) => {
    try {
        const metrics = {
            timestamp: new Date().toISOString(),
            loadBalancer: {
                activeNodes: 3,
                totalRequests: Math.floor(Math.random() * 10000) + 1000,
                strategy: 'v√≤ng-quay',
                nodes: [
                    { name: 'M√°y-1', status: 'ho·∫°t-ƒë·ªông', load: Math.floor(Math.random() * 40) + 30 },
                    { name: 'M√°y-2', status: 'ho·∫°t-ƒë·ªông', load: Math.floor(Math.random() * 40) + 20 },
                    { name: 'M√°y-3', status: 'ho·∫°t-ƒë·ªông', load: Math.floor(Math.random() * 40) + 15 }
                ]
            },
            cache: {
                hitRatio: Math.floor(Math.random() * 20) + 75,
                totalKeys: Math.floor(Math.random() * 5000) + 10000,
                memoryUsage: (Math.random() * 2 + 1.5).toFixed(1),
                performance: Math.floor(Math.random() * 30) + 70
            },
            search: {
                searchesPerMin: Math.floor(Math.random() * 40) + 20,
                avgResponseTime: Math.floor(Math.random() * 100) + 80,
                successRate: (Math.random() * 5 + 95).toFixed(1),
                popularQueries: [
                    { query: 'avatar', count: Math.floor(Math.random() * 50) + 100 },
                    { query: 'inception', count: Math.floor(Math.random() * 50) + 70 },
                    { query: 'marvel', count: Math.floor(Math.random() * 30) + 50 },
                    { query: 'chi·∫øn tranh sao', count: Math.floor(Math.random() * 40) + 45 },
                    { query: 'ma tr·∫≠n', count: Math.floor(Math.random() * 35) + 40 }
                ]
            },
            system: {
                cpuUsage: Math.floor(Math.random() * 40) + 20,
                ramUsage: Math.floor(Math.random() * 30) + 40,
                diskIO: Math.floor(Math.random() * 30) + 10,
                uptime: process.uptime()
            }
        };

        res.json(metrics);
    } catch (error) {
        console.error('Error fetching dashboard metrics:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Health check endpoint
app.get('/api/health', async (req, res) => {
    try {
        // Test Redis connection
        let redisStatus = 'kh√¥ng-kh·∫£-d·ª•ng';
        if (redisClient) {
            try {
                await redisClient.ping();
                redisStatus = 'ƒë√£-k·∫øt-n·ªëi';
            } catch (redisError) {
                redisStatus = 'm·∫•t-k·∫øt-n·ªëi';
            }
        }
        
        const health = {
            status: 'kh·ªèe-m·∫°nh',
            nodeId: NODE_ID,
            nodeName: NODE_NAME,
            pid: process.pid,
            timestamp: new Date().toISOString(),
            services: {
                database: mongoose.connection.readyState === 1 ? 'ƒë√£-k·∫øt-n·ªëi' : 'm·∫•t-k·∫øt-n·ªëi',
                search: index ? 's·∫µn-s√†ng' : 'ch∆∞a-s·∫µn-s√†ng',
                cache: redisStatus,
                loadBalancer: 'nginx-managed'
            },
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            version: process.version,
            hostname: os.hostname(),
            platform: os.platform(),
            arch: os.arch()
        };

        res.json(health);
    } catch (error) {
        console.error('Error in health check:', error);
        res.status(500).json({ 
            status: 'kh√¥ng-kh·ªèe-m·∫°nh',
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// System logs endpoint
app.get('/api/logs', (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 50;
        const type = req.query.type || 'all';
        
        // Simulate log entries
        const logs = [];
        const types = ['info', 'warning', 'error', 'success'];
        const categories = ['LOAD_BALANCER', 'CACHE', 'SEARCH', 'HEALTH_CHECK', 'SYSTEM'];
        const messages = [
            'Y√™u c·∫ßu ƒë∆∞·ª£c chuy·ªÉn th√†nh c√¥ng',
            'T·ª∑ l·ªá cache tr√∫ng t·ªëi ∆∞u',
            'T√¨m ki·∫øm ho√†n th√†nh th√†nh c√¥ng',
            'T·∫•t c·∫£ m√°y ch·ªß ƒëang ph·∫£n h·ªìi b√¨nh th∆∞·ªùng',
            'K√≠ch ho·∫°t t·ª± ƒë·ªông m·ªü r·ªông',
            'Ph√°t hi·ªán s·ª≠ d·ª•ng b·ªô nh·ªõ cao',
            'Ho√†n th√†nh l√†m m·ªõi cache',
            'Ki·ªÉm tra chuy·ªÉn ƒë·ªïi d·ª± ph√≤ng th√†nh c√¥ng'
        ];

        for (let i = 0; i < Math.min(limit, 20); i++) {
            const timestamp = new Date(Date.now() - i * 60000).toISOString();
            const logType = types[Math.floor(Math.random() * types.length)];
            const category = categories[Math.floor(Math.random() * categories.length)];
            const message = messages[Math.floor(Math.random() * messages.length)];

            if (type === 'all' || type === logType) {
                logs.push({
                    timestamp,
                    type: logType,
                    category,
                    message,
                    id: `log_${Date.now()}_${i}`
                });
            }
        }

        res.json({ logs, total: logs.length });
    } catch (error) {
        console.error('Error fetching logs:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Node status endpoint
app.get('/api/nodes', (req, res) => {
    try {
        const nodes = [
            {
                id: 'node-1',
                name: 'Node-1 (Primary)',
                status: 'active',
                load: Math.floor(Math.random() * 40) + 30,
                memory: Math.floor(Math.random() * 30) + 50,
                cpu: Math.floor(Math.random() * 40) + 20,
                uptime: Math.floor(Math.random() * 86400) + 86400,
                requests: Math.floor(Math.random() * 1000) + 500,
                lastHeartbeat: new Date().toISOString()
            },
            {
                id: 'node-2',
                name: 'Node-2',
                status: 'active',
                load: Math.floor(Math.random() * 40) + 20,
                memory: Math.floor(Math.random() * 30) + 40,
                cpu: Math.floor(Math.random() * 40) + 15,
                uptime: Math.floor(Math.random() * 86400) + 86400,
                requests: Math.floor(Math.random() * 800) + 400,
                lastHeartbeat: new Date().toISOString()
            },
            {
                id: 'node-3',
                name: 'Node-3',
                status: 'active',
                load: Math.floor(Math.random() * 40) + 15,
                memory: Math.floor(Math.random() * 30) + 35,
                cpu: Math.floor(Math.random() * 40) + 10,
                uptime: Math.floor(Math.random() * 86400) + 86400,
                requests: Math.floor(Math.random() * 600) + 300,
                lastHeartbeat: new Date().toISOString()
            }
        ];

        res.json({ nodes, total: nodes.length });
    } catch (error) {
        console.error('Error fetching node status:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Cache statistics endpoint
app.get('/api/cache/stats', (req, res) => {
    try {
        const stats = {
            timestamp: new Date().toISOString(),
            hitRatio: Math.floor(Math.random() * 20) + 75,
            missRatio: Math.floor(Math.random() * 25) + 5,
            totalKeys: Math.floor(Math.random() * 5000) + 10000,
            usedMemory: (Math.random() * 2 + 1.5).toFixed(1),
            maxMemory: '4.0',
            connections: Math.floor(Math.random() * 20) + 10,
            opsPerSecond: Math.floor(Math.random() * 1000) + 500,
            averageLatency: Math.floor(Math.random() * 10) + 2,
            keyspaces: [
                { name: 'search_cache', keys: Math.floor(Math.random() * 3000) + 5000 },
                { name: 'session_cache', keys: Math.floor(Math.random() * 1000) + 2000 },
                { name: 'analytics_cache', keys: Math.floor(Math.random() * 2000) + 3000 }
            ]
        };

        res.json(stats);
    } catch (error) {
        console.error('Error fetching cache stats:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Performance metrics endpoint
app.get('/api/performance', (req, res) => {
    try {
        const interval = req.query.interval || '1h';
        const points = [];
        const pointCount = interval === '1h' ? 60 : interval === '24h' ? 24 : 12;
        
        for (let i = pointCount; i >= 0; i--) {
            const timestamp = new Date(Date.now() - i * 60000);
            points.push({
                timestamp: timestamp.toISOString(),
                cpu: Math.floor(Math.random() * 40) + 20,
                memory: Math.floor(Math.random() * 30) + 40,
                network: Math.floor(Math.random() * 100) + 50,
                disk: Math.floor(Math.random() * 50) + 10,
                requests: Math.floor(Math.random() * 100) + 50,
                responseTime: Math.floor(Math.random() * 50) + 80
            });
        }

        res.json({
            interval,
            points,
            summary: {
                avgCpu: points.reduce((sum, p) => sum + p.cpu, 0) / points.length,
                avgMemory: points.reduce((sum, p) => sum + p.memory, 0) / points.length,
                avgResponseTime: points.reduce((sum, p) => sum + p.responseTime, 0) / points.length,
                totalRequests: points.reduce((sum, p) => sum + p.requests, 0)
            }
        });
    } catch (error) {
        console.error('Error fetching performance metrics:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// === KH·ªûI ƒê·ªòNG SERVER ===
async function startServer() {
    try {
       
        // 1. K·∫øt n·ªëi t·ªõi MongoDB v√† CH·ªú cho ƒë·∫øn khi ho√†n t·∫•t
        const dbURI = process.env.MONGODB_URI || "mongodb://localhost:27017/flexsearchDB";
        await mongoose.connect(dbURI);
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi MongoDB!');

        // --- DEBUG: List all collections ---
        const collections = await mongoose.connection.db.listCollections().toArray();
        console.log('Collections found:', collections.map(c => c.name));
        // --- END DEBUG ---

        // 2. Th√™m d·ªØ li·ªáu m·∫´u n·∫øu c·∫ßn
        // T·∫°m th·ªùi v√¥ hi·ªáu h√≥a vi·ªác t·ª± ƒë·ªông th√™m d·ªØ li·ªáu khi kh·ªüi ƒë·ªông
        // await seedDatabase();

        // 3. ƒê·ªìng b·ªô d·ªØ li·ªáu v√†o FlexSearch index v√† CH·ªú cho ƒë·∫øn khi ho√†n t·∫•t
        await populateIndex();

        // 4. CH·ªà SAU KHI M·ªåI TH·ª® S·∫¥N S√ÄNG, m·ªõi kh·ªüi ƒë·ªông Express server
        const http = require('http');
        const server = http.createServer(app);
        const tryListen = (port) => {
            server.listen(port)
            .on('listening', () => {
                console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${port}`);
            })
            .on('error', (err) => {
                if (err.code === 'EADDRINUSE') {
                    console.warn(`‚ö†Ô∏è C·ªïng ${port} ƒëang b·∫≠n. Th·ª≠ c·ªïng ${port + 1}...`);
                    tryListen(port + 1);
                } else {
                    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', err);
                    process.exit(1);
                }
            });
        };
const initialPort = parseInt(process.env.PORT, 10) || 5000;
tryListen(initialPort);
    } catch (error) {
        console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi MongoDB. Server kh√¥ng th·ªÉ kh·ªüi ƒë·ªông.', error);
        process.exit(1); // Tho√°t ·ª©ng d·ª•ng n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c DB
    }
}

startServer();