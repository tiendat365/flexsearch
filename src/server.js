const express = require('express');
const cors = require('cors');
const fs = require('fs').promises;
const mongoose = require('mongoose');
require('dotenv').config(); 
const FlexSearch = require('flexsearch');
// === KH·ªûI T·∫†O ·ª®NG D·ª§NG EXPRESS ===
const app = express();
// S·ª≠ d·ª•ng PORT t·ª´ file .env ho·∫∑c m·∫∑c ƒë·ªãnh l√† 5000
const PORT = process.env.PORT || 5000;

// === C·∫§U H√åNH MIDDLEWARE ===
app.use(cors());
app.use(express.json());
// Ph·ª•c v·ª• c√°c t·ªáp tƒ©nh (HTML, CSS, JS ph√≠a client) t·ª´ th∆∞ m·ª•c 'public'
app.use(express.static('public'));

// === K·∫æT N·ªêI V·ªöI MONGODB ===
// S·ª≠ d·ª•ng chu·ªói k·∫øt n·ªëi t·ª´ file .env
// === ƒê·ªäNH NGHƒ®A C·∫§U TR√öC D·ªÆ LI·ªÜU (SCHEMA & MODEL) ===
const documentSchema = new mongoose.Schema({
    title: { type: String, required: true },
    content: { type: String, required: true }
}, { timestamps: true }); // Th√™m timestamps ƒë·ªÉ bi·∫øt khi n√†o t√†i li·ªáu ƒë∆∞·ª£c t·∫°o/c·∫≠p nh·∫≠t
const Document = mongoose.model('Document', documentSchema);

// Danh s√°ch c√°c t·ª´ d·ª´ng ph·ªï bi·∫øn trong ti·∫øng Vi·ªát
const vietnameseStopwords = [
    "v√†", "l√†", "c·ªßa", "trong", "cho", "c√≥", "ƒë∆∞·ª£c", "m·ªôt", "khi", "t·ª´",
    "ƒë·∫øn", "v·ªõi", "ƒë·ªÉ", "c√°c", "nh∆∞", "n√†y", "ƒë√£", "v·ªÅ", "th√¨", "·ªü"
];

// Khai b√°o index ·ªü ƒë√¢y nh∆∞ng s·∫Ω kh·ªüi t·∫°o trong h√†m populateIndex
let index;




// === H√ÄM ƒê·ªíNG B·ªò D·ªÆ LI·ªÜU T·ª™ DB V√ÄO INDEX ===
async function populateIndex() {
    try {
        console.log("üîÑ ƒêang ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª´ MongoDB v√†o Index...");
        // Kh·ªüi t·∫°o m·ªôt index m·ªõi, tr·ªëng m·ªói khi h√†m n√†y ƒë∆∞·ª£c g·ªçi
        index = new FlexSearch.Document({
            document: {
                id: "_id",
                index: ["title", "content"],
                store: ["title", "content"]
            },
            tokenize: "forward",
            resolution: 9
        });

        const allDocs = await Document.find({});
        allDocs.forEach(doc => {
            // S·ª≠ d·ª•ng toJSON() thay v√¨ toObject() ƒë·ªÉ ƒë·∫£m b·∫£o _id ƒë∆∞·ª£c chuy·ªÉn th√†nh chu·ªói.
            // ƒêi·ªÅu n√†y gi√∫p FlexSearch x·ª≠ l√Ω ID m·ªôt c√°ch nh·∫•t qu√°n v√† tr√°nh c√°c l·ªói ti·ªÅm ·∫©n
            // li√™n quan ƒë·∫øn ki·ªÉu d·ªØ li·ªáu ObjectId c·ªßa Mongoose.
            // toJSON() c≈©ng t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi c√°c ki·ªÉu d·ªØ li·ªáu kh√°c nh∆∞ Date th√†nh chu·ªói ISO.
            index.add(doc.toJSON());
        });
        console.log(`‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng ${allDocs.length} t√†i li·ªáu.`);
    } catch (error) {
        console.error("‚ùå L·ªói khi ƒë·ªìng b·ªô index:", error);
    }
}

// ===================================
// === ƒê·ªäNH NGHƒ®A C√ÅC ƒê∆Ø·ªúNG D·∫™N API ===
// ===================================

// API T√¨m ki·∫øm (d√πng Index)
app.get('/api/search', (req, res) => {
  try {
    const queryParams = req.query;
    const query = queryParams.q || queryParams.title || queryParams.content;
    
    if (!query) {
      return res.status(400).json({ error: "Vui l√≤ng cung c·∫•p tham s·ªë 'q' ƒë·ªÉ t√¨m ki·∫øm." });
    }

    const limit = parseInt(queryParams.limit) || 10;
    
    console.log("Searching for:", query);
    
    // T√¨m ki·∫øm ƒë∆°n gi·∫£n h∆°n - ch·ªâ t√¨m trong title
    const searchResults = index.search(query, {
      field: "title",
      limit: limit,
      enrich: true
    });
    
    console.log("Search results count:", searchResults.length);
    
    // FlexSearch v·ªõi enrich:true tr·∫£ v·ªÅ [{field, result: [{id, doc}]}]
    let results = [];
    if (searchResults.length > 0 && searchResults[0].result) {
      results = searchResults[0].result.map(item => ({
        doc: item.doc,
        highlight: item.doc.title
      }));
    }
    
    console.log("Returning", results.length, "results");
    res.json(results);
    } catch (error) {
        console.error("L·ªói API Search:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi t√¨m ki·∫øm" });
    }
  });

// API L·∫•y t·∫•t c·∫£ t√†i li·ªáu (C√ì PH√ÇN TRANG)
app.get('/api/documents', async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;
        const skip = (page - 1) * limit;

        const docs = await Document.find({}).sort({ createdAt: -1 }).skip(skip).limit(limit);
        const totalDocuments = await Document.countDocuments();
        
        res.json({
            documents: docs,
            currentPage: page,
            totalPages: Math.ceil(totalDocuments / limit)
        });
    } catch (error) {
        console.error("L·ªói API Get Documents:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi l·∫•y t√†i li·ªáu" });
    }
});

// API Th√™m t√†i li·ªáu
app.post('/api/documents', async (req, res) => {
    try {
        const { title, content } = req.body;
        if (!title || !content) {
            return res.status(400).json({ error: "Ti√™u ƒë·ªÅ v√† n·ªôi dung l√† b·∫Øt bu·ªôc" });
        }
        const newDoc = new Document({ title, content });
        await newDoc.save();
        
        // Ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
        res.status(201).json(newDoc);
        
        // C·∫≠p nh·∫≠t index trong n·ªÅn
        index.add(newDoc.toJSON());
        console.log(`üìù ƒê√£ th√™m t√†i li·ªáu "${title}" v√†o DB v√† Index.`);

    } catch (error) {
        console.error("L·ªói API Add Document:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi th√™m t√†i li·ªáu" });
    }
});

// API C·∫≠p nh·∫≠t t√†i li·ªáu
app.put('/api/documents/:id', async (req, res) => {
    try {
        const updatedDoc = await Document.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedDoc) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu" });
        }
        
        res.json(updatedDoc);

        // C·∫≠p nh·∫≠t index trong n·ªÅn. Ch·ªâ s·ª≠ d·ª•ng toJSON() ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n.
        index.update(updatedDoc.toJSON());
        console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t t√†i li·ªáu "${updatedDoc.title}" trong DB v√† Index.`);

    } catch (error) {
        console.error("L·ªói API Update Document:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t t√†i li·ªáu" });
    }
});

// API X√≥a t√†i li·ªáu
app.delete('/api/documents/:id', async (req, res) => {
    try {
        const deletedDoc = await Document.findByIdAndDelete(req.params.id);
        if (!deletedDoc) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu" });
        }
        
        res.json({ message: "X√≥a th√†nh c√¥ng" });
        
        index.remove(req.params.id);
        console.log(`üóëÔ∏è ƒê√£ x√≥a t√†i li·ªáu ID "${req.params.id}" kh·ªèi DB v√† Index.`);

    } catch (error) {
        console.error("L·ªói API Delete Document:", error);
        res.status(500).json({ error: "L·ªói m√°y ch·ªß khi x√≥a t√†i li·ªáu" });
    }
});

// API Ki·ªÉm tra "s·ª©c kh·ªèe" c·ªßa ·ª©ng d·ª•ng v√† DB
app.get('/api/health', (req, res) => {
    const dbState = mongoose.connection.readyState;
    // readyState: 0 = disconnected, 1 = connected, 2 = connecting, 3 = disconnecting
    const isConnected = dbState === 1;

    if (isConnected) {
        res.status(200).json({
            status: 'UP',
            db: 'connected'
        });
    } else {
        res.status(503).json({ // 503 Service Unavailable
            status: 'DOWN',
            db: `state: ${mongoose.STATES[dbState]}`
        });
    }
});
// === KH·ªûI ƒê·ªòNG SERVER ===
async function startServer() {
    try {
       
        // 1. K·∫øt n·ªëi t·ªõi MongoDB v√† CH·ªú cho ƒë·∫øn khi ho√†n t·∫•t
        const dbURI = process.env.MONGODB_URI || "mongodb://localhost:27017/flexsearchDB";
        await mongoose.connect(dbURI);
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi MongoDB!');

        // --- DEBUG: List all collections ---
        const collections = await mongoose.connection.db.listCollections().toArray();
        console.log('Collections found:', collections.map(c => c.name));
        // --- END DEBUG ---

        // 2. Th√™m d·ªØ li·ªáu m·∫´u n·∫øu c·∫ßn
        // T·∫°m th·ªùi v√¥ hi·ªáu h√≥a vi·ªác t·ª± ƒë·ªông th√™m d·ªØ li·ªáu khi kh·ªüi ƒë·ªông
        // await seedDatabase();

        // 3. ƒê·ªìng b·ªô d·ªØ li·ªáu v√†o FlexSearch index v√† CH·ªú cho ƒë·∫øn khi ho√†n t·∫•t
        await populateIndex();

        // 4. CH·ªà SAU KHI M·ªåI TH·ª® S·∫¥N S√ÄNG, m·ªõi kh·ªüi ƒë·ªông Express server
        const http = require('http');
        const server = http.createServer(app);
        const tryListen = (port) => {
            server.listen(port)
            .on('listening', () => {
                console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${port}`);
            })
            .on('error', (err) => {
                if (err.code === 'EADDRINUSE') {
                    console.warn(`‚ö†Ô∏è C·ªïng ${port} ƒëang b·∫≠n. Th·ª≠ c·ªïng ${port + 1}...`);
                    tryListen(port + 1);
                } else {
                    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', err);
                    process.exit(1);
                }
            });
        };
const initialPort = parseInt(process.env.PORT, 10) || 5000;
tryListen(initialPort);
    } catch (error) {
        console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi MongoDB. Server kh√¥ng th·ªÉ kh·ªüi ƒë·ªông.', error);
        process.exit(1); // Tho√°t ·ª©ng d·ª•ng n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c DB
    }
}

startServer();