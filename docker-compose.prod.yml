version: '3.8'

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
      - app3
    restart: unless-stopped
    networks:
      - flexsearch-network

  # Application Node 1
  app1:
    build: .
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NODE_ID=node-1
      - NODE_NAME=Máy-1 (Chính)
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/flexsearch?replicaSet=rs0
    depends_on:
      - mongo1
      - redis
    restart: unless-stopped
    networks:
      - flexsearch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Node 2
  app2:
    build: .
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NODE_ID=node-2
      - NODE_NAME=Máy-2
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/flexsearch?replicaSet=rs0
    depends_on:
      - mongo1
      - redis
    restart: unless-stopped
    networks:
      - flexsearch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Node 3
  app3:
    build: .
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NODE_ID=node-3
      - NODE_NAME=Máy-3
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/flexsearch?replicaSet=rs0
    depends_on:
      - mongo1
      - redis
    restart: unless-stopped
    networks:
      - flexsearch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - flexsearch-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MongoDB Primary
  mongo1:
    image: mongo:7
    command: mongod --replSet rs0 --bind_ip_all --port 27017
    ports:
      - "27017:27017"
    volumes:
      - mongo1-data:/data/db
      - ./deploy/init-replica.js:/docker-entrypoint-initdb.d/init-replica.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: flexsearch
    restart: unless-stopped
    networks:
      - flexsearch-network

  # MongoDB Secondary 1
  mongo2:
    image: mongo:7
    command: mongod --replSet rs0 --bind_ip_all --port 27017
    volumes:
      - mongo2-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
    restart: unless-stopped
    networks:
      - flexsearch-network

  # MongoDB Secondary 2
  mongo3:
    image: mongo:7
    command: mongod --replSet rs0 --bind_ip_all --port 27017
    volumes:
      - mongo3-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
    restart: unless-stopped
    networks:
      - flexsearch-network

networks:
  flexsearch-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  mongo1-data:
    driver: local
  mongo2-data:
    driver: local
  mongo3-data:
    driver: local